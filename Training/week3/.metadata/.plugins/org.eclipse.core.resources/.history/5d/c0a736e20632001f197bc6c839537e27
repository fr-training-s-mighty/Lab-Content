package com.simplilearn.resources;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.simplilearn.model.Todo;
import com.simplilearn.service.TodoService;

@RestController
@RequestMapping("/api/todos")
public class TodoResource {

	private final TodoService todoService;

	@Autowired
	public TodoResource(TodoService todoService) {
		this.todoService = todoService;
	}

	@GetMapping
	public List<Todo> getAllTodos() {
		return todoService.getAllTodos();
	}

	// curl -X GET http://localhost:8081/api/todos/1 -H
	// "Content-Type:application/json"
	@GetMapping("/{id}")
	public ResponseEntity<Todo> getTodoById(@PathVariable Integer id) {
		Todo todo = todoService.findById(id);
		return ResponseEntity.ok(todo);
	}

	@PostMapping
	@ResponseStatus(HttpStatus.CREATED) // 201
	public ResponseEntity<Void> createTodo(@RequestBody Todo theTodo) {
		Todo createdTodo = todoService.addTodo(theTodo.getDescription());
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").build(createdTodo.getId());

		return ResponseEntity.created(location).build();

	}

	@PutMapping("/{id}")
	public ResponseEntity<Todo> updateTodo(@PathVariable Integer id, @RequestBody Todo todo) {

		boolean existingTodo = todoService.findById(id);
		if (existingTodo) {
			todoService.markCompleted(id);
		}
		return ResponseEntity.noContent().build();

	}
	
	@DeleteMapping("/{id}")
	@ResponseStatus(value = HttpStatus.NO_CONTENT)
	public void deleteTodById(@PathVariable Integer id) {
		boolean existingTodo = todoService.findById(id);
		if ( existingTodo) {
			todoService.removeTodo(id);
		}
	} 

}

